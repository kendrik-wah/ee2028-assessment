/*****************************************************************************
 *   A demo example using several of the peripherals on the base board
 *
 *   Copyright(C) 2011, EE2024
 *   All rights reserved.
 *
 ******************************************************************************/
#include "stdio.h"
#include "string.h"

#include "lpc17xx_pinsel.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_i2c.h"
#include "lpc17xx_ssp.h"
#include "lpc17xx_timer.h"

#include "joystick.h"
#include "pca9532.h"
#include "acc.h"
#include "oled.h"
#include "rgb.h"

static uint8_t barPos = 2;


static void init_ssp(void)
{
	SSP_CFG_Type SSP_ConfigStruct;
	PINSEL_CFG_Type PinCfg;

	/*
	 * Initialize SPI pin connect
	 * P0.7 - SCK;
	 * P0.8 - MISO
	 * P0.9 - MOSI
	 * P2.2 - SSEL - used as GPIO
	 */
	PinCfg.Funcnum = 2;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 0;
	PinCfg.Pinnum = 7;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 8;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 9;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Funcnum = 0;
	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 2;
	PINSEL_ConfigPin(&PinCfg);

	SSP_ConfigStructInit(&SSP_ConfigStruct);

	// Initialize SSP peripheral with parameter given in structure above
	SSP_Init(LPC_SSP1, &SSP_ConfigStruct);

	// Enable SSP peripheral
	SSP_Cmd(LPC_SSP1, ENABLE);

}

static void init_i2c(void)
{
	PINSEL_CFG_Type PinCfg;

	/* Initialize I2C2 pin connect */
	PinCfg.Funcnum = 2;
	PinCfg.Pinnum = 10;
	PinCfg.Portnum = 0;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 11;
	PINSEL_ConfigPin(&PinCfg);

	// Initialize I2C peripheral
	I2C_Init(LPC_I2C2, 100000);

	/* Enable I2C1 operation */
	I2C_Cmd(LPC_I2C2, ENABLE);
}

static void init_GPIO(void)
{
	PINSEL_CFG_Type PinCfg;

	// Initialize button SW4 and SW3
	PinCfg.Portnum = 1 ;
	PinCfg.Pinnum = 31 ;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Portnum = 2 ;
	PinCfg.Pinnum = 10 ;
	PINSEL_ConfigPin(&PinCfg);
	GPIO_SetDir(1, 1<<31, 0);
	GPIO_SetDir(2, 1<<10, 0);

}


int main (void) {

	uint8_t btn1=1;
	uint8_t btn2=1;

    init_i2c();
    init_ssp();
    init_GPIO();
    rgb_init();

    while (1)
    {
		// Control / Read the devices
		btn1 = (GPIO_ReadValue(1) >> 31) & 0x01;
		btn2 = (GPIO_ReadValue(2) >> 10) & 0x01;
		if (btn1 == 0 && btn2 == 0)	//RED
		{
			GPIO_ClearValue( 0, (1<<26) );	//Clear BLUE
			GPIO_ClearValue( 2, (1<<1) );	//Clear GREEN
			GPIO_SetValue( 2, 1);			//Set RED
		}
		else if (btn1 == 0)			//BLUE
		{
			GPIO_ClearValue( 2, 1 );		//Clear RED
			GPIO_ClearValue( 2, (1<<1) );	//Clear GREEN
			GPIO_SetValue( 0, (1<<26) );	//Set BLUE
		}
		else			//GREEN
		{
			GPIO_ClearValue( 0, (1<<26) );  //Clear BLUE
			GPIO_ClearValue( 2, 1 );		//Clear RED
			GPIO_SetValue( 2, (1<<1) );		//Set Green
		}


    }


}

void check_failed(uint8_t *file, uint32_t line)
{
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

	/* Infinite loop */
	while(1);
}
