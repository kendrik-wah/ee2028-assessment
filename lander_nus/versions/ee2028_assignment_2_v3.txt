#include <stdio.h>
#include <math.h>

#include "lpc17xx_pinsel.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_i2c.h"
#include "lpc17xx_ssp.h"
#include "lpc17xx_timer.h"

#include "joystick.h"
#include "pca9532.h"
#include "acc.h"
#include "oled.h"
#include "rgb.h"
#include "led7seg.h"
#include "temp.h"
#include "light.h"

#define PI 3.14159265358979323846

#define HALF_SECOND 500
#define ONE_SECOND 1000
#define FIVE_SECONDS 5000

#define LIGHT_THRESHOLD 30
#define TILT_THRESHOLD 30
#define BATTERY_THRESHOLD 12.5
#define DISCHARGE RATIO 0.875
#define CHARGE RATIO 1.0625

volatile uint8_t sw3_flag = 0; // detect SW3 has been pressed
volatile uint8_t toggle_flag = 0; // detect SW3 has been pressed twice in 1 second
volatile uint8_t tog_init = 0; // flag to start toggle mode, 1 to end toggle mode
volatile uint8_t land_init = 0; // flag to start landing mode, 1 to end landing mode
volatile uint8_t expl_init = 0; // flag to start exploration mode, 1 to end exploration mode

/*=============== DEFINE TEMPERATURE SENSOR VALUES ================*/
volatile uint32_t temp_value;
/*=================================================================*/

/*=============== DEFINE LED 7 SEGMENT DISPLAY ARRAY VALUES ================*/
volatile uint8_t counter_five = 0;		// This can act do: 1) 5 second counter, modulo to continuously use 2) 7seg_array traversal as shown below
uint8_t led7seg_arr[6] = {'5', '4', '3', '2', '1', '0'}; // 5 4 3 2 1 0
/*==========================================================================*/

/*======= DEFINE BATTERY RATINGS =======*/
volatile uint32_t energy_reading = 0xFFFF;
volatile float power_percentage = 100;
/*======================================*/

/*====================== DEFINE TICK VALUES ======================*/
volatile uint32_t msTicks, msTicks_half, msTicks_one, msTicks_five;		// timing ticks in milliseconds. Use in conjunction with SysTicks usually.
volatile uint8_t rgbLed_t = 0; 		// timing ticks in LEDs. Because only 2 LEDs are alternatively being used at worst, it suffices for a single flag.
/*================================================================*/

// Begin Protocol Initialization

static void init_GPIO(void) {

	PINSEL_CFG_Type PinCfg;

	// Initialize RED RGB
	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 0;
	PINSEL_ConfigPin(&PinCfg);
	GPIO_SetDir(2, 1<<0, 1);

	// Initialize BLUE RGB
	PinCfg.Portnum = 0;
	PinCfg.Pinnum = 26;
	PINSEL_ConfigPin(&PinCfg);
	GPIO_SetDir(0, 1<<26, 1);

	// Initialize GREEN RGB
	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 1;
	PINSEL_ConfigPin(&PinCfg);
	GPIO_SetDir(2, 1<<1, 1);
}

static void init_ssp(void)
{
	SSP_CFG_Type SSP_ConfigStruct;
	PINSEL_CFG_Type PinCfg;

	/*
	 * Initialize SPI pin connect
	 * P0.7 - SCK;
	 * P0.8 - MISO
	 * P0.9 - MOSI
	 * P2.2 - SSEL - used as GPIO
	 */
	PinCfg.Funcnum = 2;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 0;
	PinCfg.Pinnum = 7;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 8;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 9;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Funcnum = 0;
	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 2;
	PINSEL_ConfigPin(&PinCfg);

	SSP_ConfigStructInit(&SSP_ConfigStruct);

	// Initialize SSP peripheral with parameter given in structure above
	SSP_Init(LPC_SSP1, &SSP_ConfigStruct);

	// Enable SSP peripheral
	SSP_Cmd(LPC_SSP1, ENABLE);
}

static void init_i2c(void)
{
	PINSEL_CFG_Type PinCfg;

	/* Initialize I2C2 pin connect */
	PinCfg.Funcnum = 2;
	PinCfg.Pinnum = 10;
	PinCfg.Portnum = 0;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 11;
	PINSEL_ConfigPin(&PinCfg);

	// Initialize I2C peripheral
	I2C_Init(LPC_I2C2, 100000);

	/* Enable I2C1 operation */
	I2C_Cmd(LPC_I2C2, ENABLE);
}

// End Protocol Initialization

// Initialize Handler Initialization

void EINT3_IRQHandler(void) {

	// Determine whether GPIO Interrupt P2.10 has occurred, SW3
	if (((LPC_GPIOINT -> IO2IntStatR >> 10) & 0x1)) {
		if (toggle_flag == 0) {
			sw3_flag = 1;
	        // Clear GPIO Interrupt P0.4
	        LPC_GPIOINT->IO2IntClr = 1<<10;
	        while (msTicks - msTicks_one <= ONE_SECOND) {
				if ((LPC_GPIOINT -> IO2IntStatR >> 10) & 0x1) {
					toggle_flag = 1;
					LPC_GPIOINT->IO2IntClr = 1<<10;
					break;
				}
	        }
	        msTicks_one = msTicks;
		}
	}
		sw3_flag = 0;
}

void SysTick_Handler(void) {
	//events happening in frequency MHz
	msTicks++;
}

uint32_t getTick(void) {
	return msTicks;
}

// End Handler Initialization

//void prototyper(void) { // Current: EXPLORING MODE
//
//	// DISPLAY E ON SEGMENT_DISPLAY: 7-segment LED display
//	led7seg_setChar('E', FALSE);
//
//	// Only show blue LED
//	GPIO_ClearValue(2, 1 << 0); // clear red LED;
//	GPIO_SetValue(0, 1 << 26); // activate blue LED;
//
//	// GRAPHICS_DISPLAY: 96x64 White OLED
//	oled_clearScreen(OLED_COLOR_BLACK);
//	oled_putString(5, 5, (uint8_t *)"EXPLORING", OLED_COLOR_WHITE, OLED_COLOR_BLACK);
//	oled_putString(5, 15, (uint8_t *)"Temperature: ", OLED_COLOR_WHITE, OLED_COLOR_BLACK);
//	oled_putString(5, 10, (uint8_t *)"Battery: ", OLED_COLOR_WHITE, OLED_COLOR_BLACK);
//
//	// Set up variables for TEMPERATURE_SENSOR: MAX6576
//	uint8_t display_temp[40] = {};
//
//	// LED_ARRAY: PCA9532 Port Expander
//	pca9532_setLeds(initial_reading, 0xFFFF);
//	uint8_t display_battery[40] = {};
//
//	uint32_t counter_ten = 0;
//
//	// ONCE EVERY 10 SECONDS, DRAIN BATTERY
//	while(counter_ten < 10) {
//
//		if (msTicks - msTicks_one >= ONE_SECOND) {
//			msTicks_one = msTicks;
//			temp_value = temp_read();
//			sprintf(display_temp, "%2.2f", temp_value/10.0);
//			oled_putString(15, 15, display_temp, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
//			counter_ten++;
//		}
//
//		if (counter_ten == 10) {
//			counter_ten = counter_ten % 10;
//			initial_reading = initial_reading >> 0x0001; // shift LED light activation by 1 bit to the right.
//			pca9532_setLeds(initial_reading, 0xFFFF); // assign reading
//			power_percentage = power_percentage * DISCHARGE_RATIO; // follow geometric series equation.
//			sprintf(display_battery, "%2.2f", power_percentage);
//			oled_putString(15, 15, display_battery, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
//		}
//	}
//}

int main (void) {

    /* Tick Initialization */
    msTicks_half = msTicks;
    msTicks_one = msTicks;

	// Protocol initialization
    init_GPIO();
    init_ssp();
    init_i2c();

    /* RGB_LED initialization */
    rgb_init();

    /* SEGMENT_DISPLAY: 7-segment LED display initialization */
    led7seg_init();

    /* LIGHT_SENSOR: ISL29003 with LIGHT_RANGE_4000 initialization */
    light_enable();
    light_setRange(LIGHT_RANGE_4000); // set light sensor range to 0 lux to 4000 lux

    /* LED_ARRAY: PCA9532 Port Expander initialization */
    pca9532_init();

	/* TEMPERATURE_SENSOR: MAX6576 initialization */
	temp_init(&getTick);

    /* GRAPHICS_DISPLAY: 96x64 White OLED */
    oled_init();
    oled_clearScreen(OLED_COLOR_BLACK);

    /* ACCELEROMETER: MMA7455L x, y, and z-axis readings initialization */
    acc_init();
	char display_acc[40]={};
	double tilt_angle_x;
	double tilt_angle_y;

	int32_t xoff = 0;
	int32_t yoff = 0;
	int32_t zoff = 0;

	int8_t x = 0;
	int8_t y = 0;
	int8_t z = 0;

    acc_read(&x, &y, &z);
    xoff = 0-x;
    yoff = 0-y;
    zoff = 64-z;
    /* END ACCELEROMETER: MMA7455L x, y, and z-axis readings initialization */

    /* Interrupt Initialization and Enabling */
    SysTick_Config(SystemCoreClock/1000);
    LPC_GPIOINT -> IO2IntEnR |= 1 << 10; //		Enable GPIO Interrupt P2.10, or SW3
    NVIC_EnableIRQ(EINT3_IRQn); //				Enable EINT3 interrupt

    /*=========================*/
    /*		ORBITING MODE      */
    /*=========================*/
    led7seg_setChar(':', FALSE);
    oled_putString(10, 0, (uint8_t *)("Orbiting Mode:"), OLED_COLOR_WHITE, OLED_COLOR_BLACK);
    oled_putString(13, 10, (uint8_t *)("press SW3 to"), OLED_COLOR_WHITE, OLED_COLOR_BLACK);
    oled_putString(35, 20, (uint8_t *)("LAND"), OLED_COLOR_WHITE, OLED_COLOR_BLACK);

    /*=======================*/
    /*		TOGGLE MODE      */
    /*=======================*/
    while (tog_init == 0) {

    	if (toggle_flag == 1) {

    		// GRAPHICS_DISPLAY
    		oled_clearScreen(OLED_COLOR_BLACK);
    		oled_putString(23, 0, (uint8_t *)"ENTERING", OLED_COLOR_WHITE, OLED_COLOR_BLACK);
    		oled_putString(13, 10, (uint8_t *)"LANDING MODE", OLED_COLOR_WHITE, OLED_COLOR_BLACK);

			// Initialize LED 7 segment as '5'
			led7seg_setChar(led7seg_arr[counter_five++], FALSE);

			while (counter_five <= 5) {

				if (msTicks - msTicks_half >= HALF_SECOND) {
					msTicks_half = msTicks;
					if (rgbLed_t % 2 == 0) {
						GPIO_SetValue( 0, (1<<26) ); // activate blue LED
					}
					else {
						GPIO_ClearValue( 0, (1<<26) ); // clear blue LED
					}
					rgbLed_t++;
				}

				if (msTicks - msTicks_one >= ONE_SECOND) {
					led7seg_setChar(led7seg_arr[counter_five++], FALSE);
					msTicks_one = msTicks;
				}
			}

    		tog_init = 1;
    		rgbLed_t = 0;
    		counter_five = counter_five % 5;

    		led7seg_setChar('L', FALSE);
    		oled_clearScreen(OLED_COLOR_BLACK);
    		oled_putString(25, 0, (uint8_t *)"LANDING", OLED_COLOR_WHITE, OLED_COLOR_BLACK);
    		oled_putString(0, 20, (uint8_t *)"Acceleration: ", OLED_COLOR_WHITE, OLED_COLOR_BLACK);
    	}
    }

	/*========================*/
	/*		LANDING MODE      */
	/*========================*/
    while (tog_init == 1 && land_init == 0) {

    	// LIGHT INTENSITY < 30, break loop!
    	while(light_read() > LIGHT_THRESHOLD) {

    		// ALTERNATE_BLINK
    		if (msTicks - msTicks_half >= HALF_SECOND) {
    			msTicks_half = msTicks;
    			if (rgbLed_t % 2 == 0) {
    				GPIO_SetValue(0, 1 << 26); // activate blue LED
    				GPIO_ClearValue(2, 1 << 0); // clear red LED
    			}
    			else {
    				GPIO_ClearValue(0, 1<<26); // clear blue LED
    				GPIO_SetValue(2, 1 << 0); // activate red LED
    			}
    			rgbLed_t++;
    		}

            acc_read(&x, &y, &z);
            x = x+xoff;
            y = y+yoff;
            z = z+zoff;
            tilt_angle_x = atan(((double)x/9.81)/sqrt(pow(((double)y/9.81), 2) + pow(z, 2))) * 180/PI;
            tilt_angle_y = atan(y/sqrt(pow(x, 2) + pow(z, 2))) * 180/PI;
//            printf("%2.2f\t%2.2f\n", tilt_angle_x, tilt_angle_y);
//            if (fabs(tilt_angle_x) > TILT_THRESHOLD || fabs(tilt_angle_y) > TILT_THRESHOLD) {
//            	oled_clearScreen(OLED_COLOR_BLACK);
//            	oled_putString(35, 20, (uint8_t *)("POOR"), OLED_COLOR_WHITE, OLED_COLOR_BLACK);
//            	oled_putString(27, 30, (uint8_t *)("LANDING"), OLED_COLOR_WHITE, OLED_COLOR_BLACK);
//            	oled_putString(24, 40, (uint8_t *)("ATTITUDE"), OLED_COLOR_WHITE, OLED_COLOR_BLACK);
//            	break;
//            }
            sprintf(display_acc, "Acc-X: %d g\n", x);
            oled_putString(0, 30, (uint8_t *)display_acc, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
            sprintf(display_acc, "Acc-Y: %d g\n", y);
            oled_putString(0, 40, (uint8_t *)display_acc, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
            sprintf(display_acc, "Acc-Z: %d g\n", z);
            oled_putString(0, 50, (uint8_t *)display_acc, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
    	}

    	land_init = 1;
    	rgbLed_t = 0;
    	counter_five = 0;
    	GPIO_ClearValue(2, 1 << 0); // clear red LED
    	GPIO_SetValue(0, 1 << 26); // activate blue LED
    }

    //
    //    /*============================*/
    //    /*		EXPLORING MODE      */
    //    /*============================*/
    //
    //    else if (nav_init == TRUE && explore_flag == 1) {
    //
    //    }

}

// place check fail code here (already done) //

void check_failed(uint8_t *file, uint32_t line)
{
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

	/* Infinite loop */
	while(1);
}

///////////////////////////////////////////////
